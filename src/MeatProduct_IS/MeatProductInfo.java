/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package MeatProduct_IS;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rhythm
 */
public class MeatProductInfo extends javax.swing.JFrame {
    
    ArrayList<ArrayList<String>> meatList;
    ArrayList<String> mID = new ArrayList<>();
    ArrayList<String> mName = new ArrayList<>();
    ArrayList<String> mType = new ArrayList<>();
    ArrayList<String> mWeight = new ArrayList<>();
    ArrayList<String> mDiscount = new ArrayList<>();
    ArrayList<String> mPrice = new ArrayList<>();
    
    ArrayList<String> listID;
    ArrayList<String> listName;
    
    DefaultTableModel modProductTable;
    DefaultTableModel modAllTable;
    /**
     * Creates new form Main
     */
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton2 = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        mainLable1 = new javax.swing.JLabel();
        mainLable2 = new javax.swing.JLabel();
        mainLable3 = new javax.swing.JLabel();
        mainLable4 = new javax.swing.JLabel();
        mainSearchBtn = new javax.swing.JButton();
        mainAddBtn = new javax.swing.JButton();
        addPanel = new javax.swing.JPanel();
        addBack = new javax.swing.JLabel();
        IDlable = new javax.swing.JLabel();
        typeLable = new javax.swing.JLabel();
        nameLable = new javax.swing.JLabel();
        weightLable = new javax.swing.JLabel();
        discountLable = new javax.swing.JLabel();
        priceLable = new javax.swing.JLabel();
        addLable1 = new javax.swing.JLabel();
        addLable2 = new javax.swing.JLabel();
        addLable3 = new javax.swing.JLabel();
        IDTF = new javax.swing.JTextField();
        typeBox = new javax.swing.JComboBox<>();
        radioAvailable = new javax.swing.JRadioButton();
        radioNotAvailable = new javax.swing.JRadioButton();
        addButton = new javax.swing.JButton();
        nameTF = new javax.swing.JTextField();
        weightBox = new javax.swing.JComboBox<>();
        priceTF = new javax.swing.JTextField();
        existingButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchBack = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        typeSearchBox = new javax.swing.JComboBox<>();
        priceSearchTF = new javax.swing.JTextField();
        showAllBtn = new javax.swing.JButton();
        priceSearchBtn = new javax.swing.JButton();
        typeSearchBtn = new javax.swing.JButton();
        existingPanel = new javax.swing.JPanel();
        existingLable = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        existingBack = new javax.swing.JLabel();
        allProductsPanel = new javax.swing.JPanel();
        allLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        allTable = new javax.swing.JTable();
        allBack = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuImport = new javax.swing.JMenuItem();
        jMenuClear = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(255, 133, 133));

        mainLable1.setFont(new java.awt.Font("Lato Heavy", 1, 48)); // NOI18N
        mainLable1.setForeground(new java.awt.Color(255, 232, 232));
        mainLable1.setText("Meat");

        mainLable2.setFont(new java.awt.Font("Lato Heavy", 1, 48)); // NOI18N
        mainLable2.setForeground(new java.awt.Color(255, 232, 232));
        mainLable2.setText("Products");

        mainLable3.setFont(new java.awt.Font("Lato Heavy", 1, 48)); // NOI18N
        mainLable3.setForeground(new java.awt.Color(255, 232, 232));
        mainLable3.setText("Information");

        mainLable4.setFont(new java.awt.Font("Lato Heavy", 1, 48)); // NOI18N
        mainLable4.setForeground(new java.awt.Color(255, 232, 232));
        mainLable4.setText("System");

        mainSearchBtn.setBackground(new java.awt.Color(223, 103, 103));
        mainSearchBtn.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        mainSearchBtn.setForeground(new java.awt.Color(255, 232, 232));
        mainSearchBtn.setText("Search a Product");
        mainSearchBtn.setToolTipText("");
        mainSearchBtn.setActionCommand("");
        mainSearchBtn.setAutoscrolls(true);
        mainSearchBtn.setBorder(null);
        mainSearchBtn.setContentAreaFilled(false);
        mainSearchBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mainSearchBtn.setDefaultCapable(false);
        mainSearchBtn.setFocusPainted(false);
        mainSearchBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mainSearchBtn.setOpaque(true);
        mainSearchBtn.setSelected(true);
        mainSearchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mainSearchBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mainSearchBtnMouseExited(evt);
            }
        });
        mainSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainSearchBtnActionPerformed(evt);
            }
        });

        mainAddBtn.setBackground(new java.awt.Color(223, 103, 103));
        mainAddBtn.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        mainAddBtn.setForeground(new java.awt.Color(255, 232, 232));
        mainAddBtn.setText("Add a Product");
        mainAddBtn.setActionCommand("");
        mainAddBtn.setBorder(null);
        mainAddBtn.setContentAreaFilled(false);
        mainAddBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mainAddBtn.setDefaultCapable(false);
        mainAddBtn.setFocusPainted(false);
        mainAddBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mainAddBtn.setOpaque(true);
        mainAddBtn.setSelected(true);
        mainAddBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mainAddBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mainAddBtnMouseExited(evt);
            }
        });
        mainAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainAddBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainLable2)
                    .addComponent(mainLable1)
                    .addComponent(mainLable4)
                    .addComponent(mainLable3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 281, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainAddBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainSearchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                .addGap(156, 156, 156))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(mainLable1)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainLable2)
                    .addComponent(mainAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainLable3)
                    .addComponent(mainSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(mainLable4)
                .addContainerGap(200, Short.MAX_VALUE))
        );

        addPanel.setBackground(new java.awt.Color(255, 133, 133));

        addBack.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        addBack.setForeground(new java.awt.Color(255, 232, 232));
        addBack.setText("< Back");
        addBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBackMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addBackMouseExited(evt);
            }
        });

        IDlable.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        IDlable.setForeground(new java.awt.Color(255, 232, 232));
        IDlable.setText("Meat ID");

        typeLable.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        typeLable.setForeground(new java.awt.Color(255, 232, 232));
        typeLable.setText("Type of Meat");

        nameLable.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        nameLable.setForeground(new java.awt.Color(255, 232, 232));
        nameLable.setText("Name");

        weightLable.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        weightLable.setForeground(new java.awt.Color(255, 232, 232));
        weightLable.setText("Weight (In KG)");

        discountLable.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        discountLable.setForeground(new java.awt.Color(255, 232, 232));
        discountLable.setText("Discount");

        priceLable.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        priceLable.setForeground(new java.awt.Color(255, 232, 232));
        priceLable.setText("Price (Per KG)");

        addLable1.setFont(new java.awt.Font("Lato Heavy", 1, 36)); // NOI18N
        addLable1.setForeground(new java.awt.Color(255, 232, 232));
        addLable1.setText("ADD A");

        addLable2.setFont(new java.awt.Font("Lato Heavy", 1, 36)); // NOI18N
        addLable2.setForeground(new java.awt.Color(255, 232, 232));
        addLable2.setText("NEW");

        addLable3.setFont(new java.awt.Font("Lato Heavy", 1, 36)); // NOI18N
        addLable3.setForeground(new java.awt.Color(255, 232, 232));
        addLable3.setText("PRODUCT");

        IDTF.setBackground(new java.awt.Color(223, 103, 103));
        IDTF.setFont(new java.awt.Font("Lato Heavy", 0, 14)); // NOI18N
        IDTF.setForeground(new java.awt.Color(255, 232, 232));
        IDTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDTFActionPerformed(evt);
            }
        });

        typeBox.setBackground(new java.awt.Color(223, 103, 103));
        typeBox.setFont(new java.awt.Font("Lato Heavy", 0, 14)); // NOI18N
        typeBox.setForeground(new java.awt.Color(255, 232, 232));
        typeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---Select a Type---", "Pork", "Fish", "Mutton", "Chicken", "Buffalo" }));

        buttonGroup1.add(radioAvailable);
        radioAvailable.setFont(new java.awt.Font("Lato Heavy", 0, 14)); // NOI18N
        radioAvailable.setForeground(new java.awt.Color(255, 232, 232));
        radioAvailable.setText("Available");
        radioAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioAvailableActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioNotAvailable);
        radioNotAvailable.setFont(new java.awt.Font("Lato Heavy", 0, 14)); // NOI18N
        radioNotAvailable.setForeground(new java.awt.Color(255, 232, 232));
        radioNotAvailable.setText("Not Available");

        addButton.setBackground(new java.awt.Color(223, 103, 103));
        addButton.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 232, 232));
        addButton.setText("Add Product");
        addButton.setBorder(null);
        addButton.setContentAreaFilled(false);
        addButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addButton.setFocusPainted(false);
        addButton.setOpaque(true);
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addButtonMouseExited(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        nameTF.setBackground(new java.awt.Color(223, 103, 103));
        nameTF.setFont(new java.awt.Font("Lato Heavy", 0, 14)); // NOI18N
        nameTF.setForeground(new java.awt.Color(255, 232, 232));

        weightBox.setBackground(new java.awt.Color(223, 103, 103));
        weightBox.setFont(new java.awt.Font("Lato Heavy", 0, 14)); // NOI18N
        weightBox.setForeground(new java.awt.Color(255, 232, 232));
        weightBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select Weight--", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        priceTF.setBackground(new java.awt.Color(223, 103, 103));
        priceTF.setFont(new java.awt.Font("Lato Heavy", 0, 14)); // NOI18N
        priceTF.setForeground(new java.awt.Color(255, 232, 232));

        existingButton.setBackground(new java.awt.Color(223, 103, 103));
        existingButton.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        existingButton.setForeground(new java.awt.Color(255, 232, 232));
        existingButton.setText("Existing Products");
        existingButton.setBorder(null);
        existingButton.setContentAreaFilled(false);
        existingButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        existingButton.setFocusPainted(false);
        existingButton.setOpaque(true);
        existingButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                existingButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                existingButtonMouseExited(evt);
            }
        });
        existingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                existingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPanelLayout = new javax.swing.GroupLayout(addPanel);
        addPanel.setLayout(addPanelLayout);
        addPanelLayout.setHorizontalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addBack, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addLable1)
                    .addComponent(addLable2)
                    .addComponent(addLable3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(existingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 97, Short.MAX_VALUE))
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addPanelLayout.createSequentialGroup()
                                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(typeLable)
                                    .addComponent(IDlable)
                                    .addComponent(radioAvailable)
                                    .addComponent(radioNotAvailable)
                                    .addComponent(typeBox, 0, 197, Short.MAX_VALUE)
                                    .addComponent(IDTF, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                                .addGap(101, 101, 101)
                                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nameLable)
                                    .addComponent(weightLable)
                                    .addComponent(weightBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(priceTF)
                                    .addComponent(nameTF, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)))
                            .addGroup(addPanelLayout.createSequentialGroup()
                                .addComponent(discountLable)
                                .addGap(225, 225, 225)
                                .addComponent(priceLable)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        addPanelLayout.setVerticalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(addBack, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLable)
                    .addComponent(IDlable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(typeLable)
                            .addComponent(weightLable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightBox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(discountLable)
                            .addComponent(priceLable))
                        .addGap(18, 18, 18)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radioAvailable)
                            .addComponent(priceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(radioNotAvailable)
                        .addGap(39, 39, 39)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(existingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(addLable1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addLable2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addLable3)))
                .addContainerGap(116, Short.MAX_VALUE))
        );

        searchPanel.setBackground(new java.awt.Color(255, 133, 133));

        searchBack.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        searchBack.setForeground(new java.awt.Color(255, 232, 232));
        searchBack.setText("< Back");
        searchBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBackMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchBackMouseExited(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lato Heavy", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 232, 232));
        jLabel1.setText("SEARCH FOR A PRODUCT");

        jLabel2.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 232, 232));
        jLabel2.setText("Enter the price (Rs)");

        jLabel3.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 232, 232));
        jLabel3.setText("Select the Type of Meat");

        typeSearchBox.setBackground(new java.awt.Color(223, 103, 103));
        typeSearchBox.setFont(new java.awt.Font("Lato Heavy", 0, 14)); // NOI18N
        typeSearchBox.setForeground(new java.awt.Color(255, 232, 232));
        typeSearchBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---Select a Type---", "Pork", "Fish", "Mutton", "Chicken", "Buffalo" }));

        priceSearchTF.setBackground(new java.awt.Color(223, 103, 103));
        priceSearchTF.setFont(new java.awt.Font("Lato Heavy", 0, 14)); // NOI18N
        priceSearchTF.setForeground(new java.awt.Color(255, 232, 232));
        priceSearchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSearchTFActionPerformed(evt);
            }
        });

        showAllBtn.setBackground(new java.awt.Color(223, 103, 103));
        showAllBtn.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        showAllBtn.setForeground(new java.awt.Color(255, 232, 232));
        showAllBtn.setText("Show all products");
        showAllBtn.setContentAreaFilled(false);
        showAllBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        showAllBtn.setOpaque(true);
        showAllBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                showAllBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                showAllBtnMouseExited(evt);
            }
        });
        showAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllBtnActionPerformed(evt);
            }
        });

        priceSearchBtn.setBackground(new java.awt.Color(223, 103, 103));
        priceSearchBtn.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        priceSearchBtn.setForeground(new java.awt.Color(255, 232, 232));
        priceSearchBtn.setText("Search By Price");
        priceSearchBtn.setContentAreaFilled(false);
        priceSearchBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        priceSearchBtn.setOpaque(true);
        priceSearchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                priceSearchBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                priceSearchBtnMouseExited(evt);
            }
        });
        priceSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSearchBtnActionPerformed(evt);
            }
        });

        typeSearchBtn.setBackground(new java.awt.Color(223, 103, 103));
        typeSearchBtn.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        typeSearchBtn.setForeground(new java.awt.Color(255, 232, 232));
        typeSearchBtn.setText("Search by Type");
        typeSearchBtn.setContentAreaFilled(false);
        typeSearchBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        typeSearchBtn.setOpaque(true);
        typeSearchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                typeSearchBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                typeSearchBtnMouseExited(evt);
            }
        });
        typeSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeSearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jLabel2))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(priceSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typeSearchBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(150, 150, 150))
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(searchBack, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(131, 131, 131)
                .addComponent(jLabel1)
                .addContainerGap(298, Short.MAX_VALUE))
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(priceSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(typeSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(381, 381, 381))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBack, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(48, 48, 48)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addComponent(showAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
        );

        existingPanel.setBackground(new java.awt.Color(255, 133, 133));
        existingPanel.setToolTipText("");

        existingLable.setFont(new java.awt.Font("Lato Heavy", 1, 48)); // NOI18N
        existingLable.setForeground(new java.awt.Color(255, 232, 232));
        existingLable.setText("Existing Products");

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MeatID", "Name", "Type of Meat", "Weight (KG)", "Discount", "Price (Rs)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);
        if (productTable.getColumnModel().getColumnCount() > 0) {
            productTable.getColumnModel().getColumn(0).setResizable(false);
            productTable.getColumnModel().getColumn(1).setResizable(false);
            productTable.getColumnModel().getColumn(2).setResizable(false);
            productTable.getColumnModel().getColumn(3).setResizable(false);
            productTable.getColumnModel().getColumn(4).setResizable(false);
            productTable.getColumnModel().getColumn(5).setResizable(false);
        }

        existingBack.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        existingBack.setForeground(new java.awt.Color(255, 232, 232));
        existingBack.setText("< Back");
        existingBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        existingBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                existingBackMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                existingBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                existingBackMouseExited(evt);
            }
        });

        javax.swing.GroupLayout existingPanelLayout = new javax.swing.GroupLayout(existingPanel);
        existingPanel.setLayout(existingPanelLayout);
        existingPanelLayout.setHorizontalGroup(
            existingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(existingPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(existingBack, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(existingLable)
                .addGap(281, 281, 281))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, existingPanelLayout.createSequentialGroup()
                .addContainerGap(123, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 813, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );
        existingPanelLayout.setVerticalGroup(
            existingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(existingPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(existingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(existingLable, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(existingBack, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        allProductsPanel.setBackground(new java.awt.Color(255, 133, 133));
        allProductsPanel.setToolTipText("");

        allLabel.setFont(new java.awt.Font("Lato Heavy", 1, 48)); // NOI18N
        allLabel.setForeground(new java.awt.Color(255, 232, 232));
        allLabel.setText("All Products");

        allTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MeatID", "Name", "Type of Meat", "Weight (KG)", "Discount", "Price (Rs)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(allTable);
        if (allTable.getColumnModel().getColumnCount() > 0) {
            allTable.getColumnModel().getColumn(0).setResizable(false);
            allTable.getColumnModel().getColumn(1).setResizable(false);
            allTable.getColumnModel().getColumn(2).setResizable(false);
            allTable.getColumnModel().getColumn(3).setResizable(false);
            allTable.getColumnModel().getColumn(4).setResizable(false);
            allTable.getColumnModel().getColumn(5).setResizable(false);
        }

        allBack.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        allBack.setForeground(new java.awt.Color(255, 232, 232));
        allBack.setText("< Back");
        allBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        allBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allBackMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                allBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                allBackMouseExited(evt);
            }
        });

        javax.swing.GroupLayout allProductsPanelLayout = new javax.swing.GroupLayout(allProductsPanel);
        allProductsPanel.setLayout(allProductsPanelLayout);
        allProductsPanelLayout.setHorizontalGroup(
            allProductsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allProductsPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(allBack, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(255, 255, 255)
                .addComponent(allLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allProductsPanelLayout.createSequentialGroup()
                .addContainerGap(123, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 813, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );
        allProductsPanelLayout.setVerticalGroup(
            allProductsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allProductsPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(allProductsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(allLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allBack, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        jMenuBar1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 204, 204)));
        jMenuBar1.setOpaque(false);

        jMenuFile.setText("File");

        jMenuImport.setText("Open");
        jMenuImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuImportActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuImport);

        jMenuClear.setText("Clear");
        jMenuClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuClearActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuClear);

        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuExit);

        jMenuBar1.add(jMenuFile);

        jMenuHelp.setText("Help");
        jMenuHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuHelpMouseClicked(evt);
            }
        });
        jMenuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHelpActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(addPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(searchPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(existingPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(allProductsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(addPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(searchPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(existingPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(allProductsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public MeatProductInfo() {
        this.listName = new ArrayList<>(2);
        this.listID = new ArrayList<>(2);
        this.meatList = new ArrayList< >();
        initComponents();
        this.setTitle("Meat Products Information System");
        setLocationRelativeTo(null);
        mainPanel.setVisible(true);
        searchPanel.setVisible(false);
        addPanel.setVisible(false);
        existingPanel.setVisible(false);
        allProductsPanel.setVisible(false);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
    
    private void mainAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainAddBtnActionPerformed
        mainPanel.setVisible(false);
        searchPanel.setVisible(false);
        addPanel.setVisible(true);
        existingPanel.setVisible(false);
        allProductsPanel.setVisible(false);
    }//GEN-LAST:event_mainAddBtnActionPerformed
    
    private void mainSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainSearchBtnActionPerformed
        mainPanel.setVisible(false);
        searchPanel.setVisible(true);
        addPanel.setVisible(false);
        existingPanel.setVisible(false);
        allProductsPanel.setVisible(false);
    }//GEN-LAST:event_mainSearchBtnActionPerformed
    
    private void radioAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioAvailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioAvailableActionPerformed
    
    private void IDTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDTFActionPerformed
    
    private void addBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBackMouseClicked
        mainPanel.setVisible(true);
        searchPanel.setVisible(false);
        addPanel.setVisible(false);
        existingPanel.setVisible(false);
        allProductsPanel.setVisible(false);
    }//GEN-LAST:event_addBackMouseClicked
    
    private void searchBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBackMouseClicked
        mainPanel.setVisible(true);
        searchPanel.setVisible(false);
        addPanel.setVisible(false);
        existingPanel.setVisible(false);
        allProductsPanel.setVisible(false);
    }//GEN-LAST:event_searchBackMouseClicked
    
    private void addBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBackMouseEntered
        addBack.setForeground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_addBackMouseEntered
    
    private void addBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBackMouseExited
        addBack.setForeground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_addBackMouseExited
    
    private void searchBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBackMouseEntered
        searchBack.setForeground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_searchBackMouseEntered
    
    private void searchBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBackMouseExited
        searchBack.setForeground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_searchBackMouseExited
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        
        String meatID = IDTF.getText();
        String name = nameTF.getText();
        String price =  priceTF.getText();
        double tPrice = Integer.parseInt(price);
        String discount = "";
        
        if (radioAvailable.isSelected()){
            discount = "Available";
            tPrice = tPrice * 0.9;
        }
        if (radioNotAvailable.isSelected()){
            discount = "Not Available";
        }
        
        price = String.valueOf(tPrice);
        String type = (String) typeBox.getSelectedItem();
        String weight = (String) weightBox.getSelectedItem();
        
        
        if (!(meatID.isEmpty())){
            if(!listID.contains(meatID.toLowerCase())){
                if(!(name.isEmpty())){
                    if(name.matches("[a-zA-Z ]+")){
                        if(!listName.contains(name.toLowerCase())){
                            if(!(typeBox.getSelectedIndex()==0)){
                                if(!(weightBox.getSelectedIndex()==0)){
                                    if (!discount.isEmpty()){
                                        try{
                                            if(!(price).isEmpty()){
                                                if(Double.parseDouble(price) > 0){
                                                    
                                                    modProductTable = (DefaultTableModel)productTable.getModel();
                                                    modAllTable = (DefaultTableModel)allTable.getModel();
                                                    modProductTable.addRow(new Object[]{null,null,null,null,null,null});
                                                    modAllTable.addRow(new Object[]{null,null,null,null,null,null});
                                                    String details[] = {meatID, name, type, weight, discount, price};
                                                    
                                                    int nextRow =0;
                                                    int rowCounter = productTable.getRowCount();
                                                    int columnCounter = productTable.getColumnCount();
                                                    boolean empty = false;
                                                    do {
                                                        String rowChecker = (String) productTable.getValueAt(nextRow, 0);
                                                        if (rowChecker !=null && rowChecker.length() != 0) {
                                                            
                                                            nextRow ++;
                                                            
                                                        }
                                                        else{
                                                            empty = true;
                                                        }
                                                        
                                                    } while (nextRow<rowCounter && empty == false);
                                                    
                                                    for (int i = 0; i < columnCounter; i++) {
                                                        productTable.setValueAt(details[i], nextRow, i);
                                                        allTable.setValueAt(details[i], nextRow, i);
                                                    }
                                                    
                                                    listID.add(meatID.toLowerCase());
                                                    listName.add(name.toLowerCase());
                                                    
                                                    
                                                    clear();
                                                    JOptionPane.showMessageDialog(addPanel, "Product Succesfully Added");
                                                    
                                                }
                                                else{
                                                    JOptionPane.showMessageDialog(addPanel, "Invalid Price! Price must be positive integer");
                                                }
                                            }
                                            else{
                                                JOptionPane.showMessageDialog(addPanel, "Invalid Price! Price field cannot be empty");
                                            }}catch(NumberFormatException e){
                                                JOptionPane.showMessageDialog(addPanel, "Invalid Price! Price must be numeric");
                                            }
                                    }
                                    else{
                                        JOptionPane.showMessageDialog(addPanel, "Select if Discount is Available or not");
                                    }
                                    
                                }
                                else{
                                    JOptionPane.showMessageDialog(addPanel, "Please select weight!");
                                }
                            }
                            else{
                                JOptionPane.showMessageDialog(addPanel, "Please select Type of Meat!");
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(addPanel, "Name has been repeated");
                        }
                    }
                    
                    else{
                        JOptionPane.showMessageDialog(addPanel, "Invalid Name! Name cannot be numeric!");
                    }
                    
                }
                else{
                    JOptionPane.showMessageDialog(addPanel, "Invalid Name! Please Input a valid Name!");
                }
            }
            else{
                JOptionPane.showMessageDialog(addPanel, "Invalid ID! Meat ID has been repeated");
            }
        }
        else{
            JOptionPane.showMessageDialog(addPanel, "Invalid MeatID! Please Input a valid Meat ID!");
        }
        
        
    }//GEN-LAST:event_addButtonActionPerformed
    
    private void existingBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_existingBackMouseClicked
        mainPanel.setVisible(false);
        searchPanel.setVisible(false);
        addPanel.setVisible(true);
        existingPanel.setVisible(false);
        allProductsPanel.setVisible(false);
    }//GEN-LAST:event_existingBackMouseClicked
    
    private void existingBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_existingBackMouseEntered
        existingBack.setForeground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_existingBackMouseEntered
    
    private void existingBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_existingBackMouseExited
        existingBack.setForeground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_existingBackMouseExited
    
    private void existingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_existingButtonActionPerformed
        mainPanel.setVisible(false);
        searchPanel.setVisible(false);
        addPanel.setVisible(false);
        existingPanel.setVisible(true);
        allProductsPanel.setVisible(false);
    }//GEN-LAST:event_existingButtonActionPerformed
    
    private void mainAddBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainAddBtnMouseEntered
        mainAddBtn.setForeground(new java.awt.Color(223, 103, 103));
        mainAddBtn.setBackground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_mainAddBtnMouseEntered
    
    private void mainAddBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainAddBtnMouseExited
        mainAddBtn.setForeground(new java.awt.Color(255, 232, 232));
        mainAddBtn.setBackground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_mainAddBtnMouseExited
    
    private void mainSearchBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainSearchBtnMouseEntered
        mainSearchBtn.setForeground(new java.awt.Color(223, 103, 103));
        mainSearchBtn.setBackground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_mainSearchBtnMouseEntered
    
    private void mainSearchBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainSearchBtnMouseExited
        mainSearchBtn.setForeground(new java.awt.Color(255, 232, 232));
        mainSearchBtn.setBackground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_mainSearchBtnMouseExited
    
    private void addButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseEntered
        addButton.setForeground(new java.awt.Color(223, 103, 103));
        addButton.setBackground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_addButtonMouseEntered
    
    private void addButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseExited
        addButton.setForeground(new java.awt.Color(255, 232, 232));
        addButton.setBackground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_addButtonMouseExited
    
    private void existingButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_existingButtonMouseEntered
        existingButton.setForeground(new java.awt.Color(223, 103, 103));
        existingButton.setBackground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_existingButtonMouseEntered
    
    private void existingButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_existingButtonMouseExited
        existingButton.setForeground(new java.awt.Color(255, 232, 232));
        existingButton.setBackground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_existingButtonMouseExited
    
    private void priceSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSearchBtnActionPerformed
        clearData();
        addData();
        
        String sPrice =  priceSearchTF.getText();
        
        try{
            if(!(sPrice).isEmpty()){
                if(Double.parseDouble(sPrice) > 0){
                    double find = Double.parseDouble(sPrice);
                    boolean present = mPrice.contains(String.valueOf(find));
                    if (present) {
                        doSelectionSort(meatList);
                        int index = binarySearch(meatList.get(5), 0, meatList.get(5).size()-1, find);
                        JOptionPane.showMessageDialog(searchPanel, "For the price of " + meatList.get(5).get(index) +  ", Product name is " +meatList.get(1).get(index)
                                + " with MeatID: " + meatList.get(0).get(index) + "\n" + meatList.get(3).get(index) + " Kg "
                                + meatList.get(2).get(index) + " meat "+ "and discount is " + meatList.get(4).get(index) );
                    }else{
                        JOptionPane.showMessageDialog(addPanel, "Invalid Price! Price not found");
                    }
                }
                else{
                    JOptionPane.showMessageDialog(addPanel, "Invalid Price! Price cannot be negative");
                }
            }else{
                JOptionPane.showMessageDialog(addPanel, "Invalid Price! Price cannot be empty");
            }
            
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(addPanel, "Invalid Price! Price must be numeric");
        }
        
        
        
    }//GEN-LAST:event_priceSearchBtnActionPerformed
    
    private void showAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllBtnActionPerformed
        mainPanel.setVisible(false);
        searchPanel.setVisible(false);
        addPanel.setVisible(false);
        existingPanel.setVisible(false);
        allProductsPanel.setVisible(true);
    }//GEN-LAST:event_showAllBtnActionPerformed
    
    private void allBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allBackMouseClicked
        mainPanel.setVisible(false);
        searchPanel.setVisible(true);
        addPanel.setVisible(false);
        existingPanel.setVisible(false);
        allProductsPanel.setVisible(false);
    }//GEN-LAST:event_allBackMouseClicked
    
    private void allBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allBackMouseEntered
        allBack.setForeground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_allBackMouseEntered
    
    private void allBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allBackMouseExited
        allBack.setForeground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_allBackMouseExited
    
    private void typeSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeSearchBtnActionPerformed
        clearData();
        addData();
        
        if(!(typeSearchBox.getSelectedIndex()==0)){
            String type = (String) typeSearchBox.getSelectedItem();
            
            if(type.equals("Pork")){
                if(typeSearch(type)[0].isEmpty()){
                    JOptionPane.showMessageDialog(searchPanel, "There are no Products Associated with Pork");
                }
                else{
                    JOptionPane.showMessageDialog(searchPanel, "There are " + typeSearch(type)[5] + " products associated with Pork:"+typeSearch(type)[0]);
                }
            }
            else if(type.equals("Mutton")){
                if(typeSearch(type)[1].isEmpty()){
                    JOptionPane.showMessageDialog(searchPanel, "There are no Products Associated with Mutton");
                }
                else{
                    
                    JOptionPane.showMessageDialog(searchPanel, "There are " + typeSearch(type)[6] + " products associated with Mutton:"+typeSearch(type)[1]);
                }
            }
            else if(type.equals("Chicken")){
                if(typeSearch(type)[2].isEmpty()){
                    JOptionPane.showMessageDialog(searchPanel, "There are no Products Associated with Chicken");
                }
                else{
                    JOptionPane.showMessageDialog(searchPanel, "There are " + typeSearch(type)[7] + " products associated with Chicken:"+typeSearch(type)[2]);
                }
            }
            else if(type.equals("Buffalo")){
                if(typeSearch(type)[3].isEmpty()){
                    JOptionPane.showMessageDialog(searchPanel, "There are no Products Associated with Buffalo");
                }
                else{
                    JOptionPane.showMessageDialog(searchPanel, "There are " + typeSearch(type)[8] + " products associated with Buffalo:"+typeSearch(type)[3]);
                }
            }
            else if(type.equals("Fish")){
                if(typeSearch(type)[4].isEmpty()){
                    JOptionPane.showMessageDialog(searchPanel, "There are no Products Associated with Fish");
                }
                else{
                    JOptionPane.showMessageDialog(searchPanel, "There are " + typeSearch(type)[9] + " products associated with Fish:" + typeSearch(type)[4]);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(searchPanel, "Please select Type of Meat!");
        }
        
        
    }//GEN-LAST:event_typeSearchBtnActionPerformed
    
    private void priceSearchBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_priceSearchBtnMouseEntered
        priceSearchBtn.setForeground(new java.awt.Color(223, 103, 103));
        priceSearchBtn.setBackground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_priceSearchBtnMouseEntered
    
    private void priceSearchBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_priceSearchBtnMouseExited
        priceSearchBtn.setForeground(new java.awt.Color(255, 232, 232));
        priceSearchBtn.setBackground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_priceSearchBtnMouseExited
    
    private void typeSearchBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeSearchBtnMouseEntered
        typeSearchBtn.setForeground(new java.awt.Color(223, 103, 103));
        typeSearchBtn.setBackground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_typeSearchBtnMouseEntered
    
    private void typeSearchBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeSearchBtnMouseExited
        typeSearchBtn.setForeground(new java.awt.Color(255, 232, 232));
        typeSearchBtn.setBackground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_typeSearchBtnMouseExited
    
    private void showAllBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showAllBtnMouseEntered
        showAllBtn.setForeground(new java.awt.Color(223, 103, 103));
        showAllBtn.setBackground(new java.awt.Color(255, 232, 232));
    }//GEN-LAST:event_showAllBtnMouseEntered
    
    private void showAllBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showAllBtnMouseExited
        showAllBtn.setForeground(new java.awt.Color(255, 232, 232));
        showAllBtn.setBackground(new java.awt.Color(223, 103, 103));
    }//GEN-LAST:event_showAllBtnMouseExited
    
    private void jMenuImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuImportActionPerformed
        // TODO add your handling code here:
        int dialogChoice = 1;
        File importFile = new File("demo1.txt");
        int userAnswer = JOptionPane.showConfirmDialog(null, "Do you want to choose file? \n "
                + "(No - imports default data) ", "User Option", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        switch (userAnswer) {
            case 1: importFile = new File("ImportData.txt");
                    dialogChoice = 0;
                    break;
            case 0: String defaultFileDirectory = "D:\\";
                    JFileChooser dialogFileChooser = new JFileChooser(defaultFileDirectory);
                    dialogChoice = dialogFileChooser.showOpenDialog(null);
                    importFile = dialogFileChooser.getSelectedFile();
                    break;
        }
        
        if (dialogChoice == JFileChooser.APPROVE_OPTION) { 
            try {
                BufferedReader br = new BufferedReader(new FileReader(importFile));
                modProductTable = (DefaultTableModel)productTable.getModel();
                modAllTable = (DefaultTableModel)allTable.getModel();
                Object[] rows = br.lines().toArray();
                
                for(int i =0; i < rows.length; i++){
                    String[] row = rows[i].toString().split("/");
                    modProductTable.addRow(row);
                    modAllTable.addRow(row);
                }
                
                addCheckData();
                JOptionPane.showMessageDialog(mainPanel, "File data has been imported in the Product Table.");
                
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "System cannot find the selected file.");
                
            } catch (NullPointerException ex){
                modProductTable.setRowCount(0);
                modAllTable.setRowCount(0);
                clearData();
                clearCheckData();
                JOptionPane.showMessageDialog(this, "Wrong file selected. Added data cleared.");
            }
            
         }
    

    }//GEN-LAST:event_jMenuImportActionPerformed
    
    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        // TODO add your handling code here:
        int userAnswer = JOptionPane.showConfirmDialog(null, "Do you want to close the program?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (userAnswer == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_jMenuExitActionPerformed
    
    private void priceSearchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSearchTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceSearchTFActionPerformed
    
    private void jMenuClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuClearActionPerformed
        // TODO add your handling code here:
        int rowC = productTable.getRowCount();
        
        if(rowC > 0){
            modProductTable.setRowCount(0);
            modAllTable.setRowCount(0);
            clearData();
            clearCheckData();
            JOptionPane.showMessageDialog(mainPanel, "Product table is cleared!");
        }else{
            JOptionPane.showMessageDialog(mainPanel, "Product table is empty!");
        }
    }//GEN-LAST:event_jMenuClearActionPerformed
    
    private void jMenuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHelpActionPerformed
        
    }//GEN-LAST:event_jMenuHelpActionPerformed
    
    private void jMenuHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuHelpMouseClicked
        // TODO add your handling code here:
        try {
            Desktop.getDesktop().open(new java.io.File("UserManual.pdf"));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "File not found");
        }
    }//GEN-LAST:event_jMenuHelpMouseClicked
    
    private void clear(){
        IDTF.setText("");
        nameTF.setText("");
        weightBox.setSelectedIndex(0);
        typeBox.setSelectedIndex(0);
        buttonGroup1.clearSelection();
        priceTF.setText("");
    }
    
    public void clearData(){
        meatList.clear();
        mID.clear();
        mName.clear();
        mType.clear();
        mWeight.clear();
        mDiscount.clear();
        mPrice.clear();
    }
    
    public void addCheckData(){
        int rowCounter = productTable.getRowCount();
        for(int i=0; i<rowCounter; i++){
            String meatID = (String) productTable.getModel().getValueAt(i,0);
            String name = (String) productTable.getModel().getValueAt(i,1);
            
            listID.add(meatID.toLowerCase());
            listName.add(name.toLowerCase());
        }
    }
    
    public void clearCheckData(){
        listID.clear();
        listName.clear();
    }
    
    public void addData(){
        int rowCounter = productTable.getRowCount();
        for(int i=0; i<rowCounter; i++){
            String meatID = (String) productTable.getModel().getValueAt(i,0);
            String name = (String) productTable.getModel().getValueAt(i,1);
            String type = (String) productTable.getModel().getValueAt(i,2);
            String weight = (String) productTable.getModel().getValueAt(i,3);
            String discount = (String) productTable.getModel().getValueAt(i,4);
            String sPrice = (String) productTable.getModel().getValueAt(i,5);
            String pp = String.valueOf(Double.parseDouble(sPrice));
            
            mID.add(meatID);
            mName.add(name);
            mType.add(type);
            mWeight.add(weight);
            mDiscount.add(discount);
            mPrice.add(pp);
            
        }
        meatList.add(mID);
        meatList.add(mName);
        meatList.add(mType);
        meatList.add(mWeight);
        meatList.add(mDiscount);
        meatList.add(mPrice);
    }
    
    private String[] typeSearch(String type){
        String porkDetails = "";
        String muttonDetails = "";
        String chickenDetails = "";
        String buffDetails = "";
        String fishDetails = "";
        String[] details = new String [10];
        
        int nextRow =0;
        int rowCounter = productTable.getRowCount();
        int pCount = 0; int mCount = 0; int cCount = 0; int bCount = 0; int fCount = 0;
        for (int i = 0; i < rowCounter; i++) {
            String rowChecker = (String) productTable.getValueAt(nextRow, 0);
            if (rowChecker !=null && rowChecker.length() != 0) {
                rowChecker = (String) productTable.getValueAt(nextRow, 2);
                switch (rowChecker) {
                    case "Pork":
                        porkDetails = porkDetails + " " + productTable.getValueAt(nextRow,1) + ",";
                        pCount++;
                        nextRow++;
                        break;
                    case "Mutton":
                        muttonDetails = muttonDetails + " " + productTable.getValueAt(nextRow,1) + ",";
                        mCount++;
                        nextRow++;
                        break;
                    case "Chicken":
                        chickenDetails = chickenDetails + " " + productTable.getValueAt(nextRow,1) + ",";
                        cCount++;
                        nextRow++;
                        break;
                    case "Buffalo":
                        buffDetails = buffDetails + " " + productTable.getValueAt(nextRow,1) + ",";
                        bCount++;
                        nextRow++;
                        break;
                    case "Fish":
                        fishDetails = fishDetails + " " + productTable.getValueAt(nextRow,1) + ",";
                        fCount++;
                        nextRow++;
                        break;
                    default:
                        break;
                }
            }
            else{
                break;
            }
            
        }
        details[0] = porkDetails;
        details[5] = String.valueOf(pCount);
        details[1]= muttonDetails; 
        details[6] =  String.valueOf(mCount);
        details[2]= chickenDetails; 
        details[7] = String.valueOf(cCount);
        details[3]= buffDetails; 
        details[8] = String.valueOf(bCount);
        details[4] = fishDetails;  
        details[9] = String.valueOf(fCount);
        return details;
    }
    
    public static void doSelectionSort(ArrayList<ArrayList<String>> aList) {
        
        ArrayList<Double> newList = conString(aList.get(5));
        
        for (int i = 0; i < newList.size(); i++) {
            int p = i;
            for (int j = i; j < newList.size(); j++) {
                if (newList.get(j) < newList.get(p))
                    p = j;
            }
            double min = newList.get(p);
            newList.set(p, newList.get(i));
            newList.set(i, min);
            
            for(int k = 0; k < 5; k++){
                sortOtherValue(aList.get(k),p,i);
            }
            
        }
        aList.get(5).clear();
        for (double myDouble : newList){
            aList.get(5).add(String.valueOf(myDouble));
        }
        
    }
    
    public static void sortOtherValue(ArrayList<String> nam, int p, int i){
        String man = nam.get(p);
        nam.set(p,nam.get(i));
        nam.set(i, man);
    }
    
    public static int binarySearch(ArrayList<String> arr, int low, int high, double find){
        
        ArrayList<Double> prr = conString(arr);
        while(low <= high){
            int mid = (low + high) / 2;
            if (prr.get(mid) == (find)) {
                return mid;
            }
            else if (prr.get(mid) < find) {
                low = mid + 1;
            }else{
                high = mid - 1;
            }
        }
        return -1;
    }
    
    public static ArrayList conString(ArrayList<String> arr){
        ArrayList<Double> newList = new ArrayList<>(arr.size());
        for (String myInt : arr){
            newList.add(Double.parseDouble(myInt));
        }
        return newList;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MeatProductInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MeatProductInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MeatProductInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MeatProductInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new MeatProductInfo().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDTF;
    private javax.swing.JLabel IDlable;
    private javax.swing.JLabel addBack;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel addLable1;
    private javax.swing.JLabel addLable2;
    private javax.swing.JLabel addLable3;
    private javax.swing.JPanel addPanel;
    private javax.swing.JLabel allBack;
    private javax.swing.JLabel allLabel;
    private javax.swing.JPanel allProductsPanel;
    private javax.swing.JTable allTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel discountLable;
    private javax.swing.JLabel existingBack;
    private javax.swing.JButton existingButton;
    private javax.swing.JLabel existingLable;
    private javax.swing.JPanel existingPanel;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuClear;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuImport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mainAddBtn;
    private javax.swing.JLabel mainLable1;
    private javax.swing.JLabel mainLable2;
    private javax.swing.JLabel mainLable3;
    private javax.swing.JLabel mainLable4;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton mainSearchBtn;
    private javax.swing.JLabel nameLable;
    private javax.swing.JTextField nameTF;
    private javax.swing.JLabel priceLable;
    private javax.swing.JButton priceSearchBtn;
    private javax.swing.JTextField priceSearchTF;
    private javax.swing.JTextField priceTF;
    private javax.swing.JTable productTable;
    private javax.swing.JRadioButton radioAvailable;
    private javax.swing.JRadioButton radioNotAvailable;
    private javax.swing.JLabel searchBack;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JButton showAllBtn;
    private javax.swing.JComboBox<String> typeBox;
    private javax.swing.JLabel typeLable;
    private javax.swing.JComboBox<String> typeSearchBox;
    private javax.swing.JButton typeSearchBtn;
    private javax.swing.JComboBox<String> weightBox;
    private javax.swing.JLabel weightLable;
    // End of variables declaration//GEN-END:variables
    
}

